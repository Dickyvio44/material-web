/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * A class that represents a markown table as column titles and rows. The
 * `toString()` method outputs a markdown-compatible table.
 */
export class MarkdownTable {
  private _rows: string[][] = [];

  /**
   * @param _columns The column titles of the table.
   */
  constructor(private _columns: string[]) {}

  /**
   * The columns of the table.
   */
  get columns() {
    return this._columns;
  }

  /**
   * The rows of the table. (add rows with the `addRow()` method)
   */
  get rows() {
    return this._rows;
  }

  /**
   * Adds a row to the table. The row must be the same length as the number of
   * columns and be in order of the provided columns.
   *
   * @param row The row to add to the table. Must be the same length as the
   * number of columns.
   */
  addRow(row: string[]) {
    if (row.length !== this._columns.length) {
      throw new Error(
        `Row length (${row.length}) must match column length (${this._columns.length})`
      );
    }

    this._rows.push(row);
  }

  /**
   * Generates a markdown-compatible table from the columns and rows provided.
   *
   * @returns A markdown-compatible table.
   */
  toString() {
    const headerRow = this._columns.join(' | ');
    const dividerRow = this._columns.map(() => '---').join(' | ');
    const rows = this._rows.map((row) => `${row.join(' | ')}`).join('\n');
    return `<!-- mdformat off(autogenerated might break rendering in catalog) -->

${headerRow}
${dividerRow}
${rows}

<!-- mdformat on(autogenerated might break rendering in catalog) -->`;
  }
}
